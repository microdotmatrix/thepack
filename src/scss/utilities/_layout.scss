// ----
// Flex Grid + Data-attributes...
// ----
// I just can't get over semantic styling enough to convert entirely to utility classes...
// but data-attributes are fun, especially for anything that is assigned numeric values. And I love flexbox.
// I'll do some Grid stuff too, but Flex is my jam.
//
// http://sassflexboxgrid.com
// ^^^ This guy wrote a very handy set of mixins to simplify row and column generation using Sass and Flexbox
// fully decked out with responsive breakpoint functions and generators for utility classes. Here I'll just be
// using the row and column mixins, passing through a @for function to generate data-attribute selectors with
// 12 columns.
// ----

[data-flex],
[data-flex="row"] {
  @include row($wrap: nowrap);

}

[data-flex="column"] {
  @include row($direction: column);
}

// 12 column flex-box layout grid that adapts to single column on mobile
$flex-columns: 12;

@for $i from 1 through $flex-columns {
  [data-column="#{$i}"] {
    @include col($i);
  }
}

@for $i from 1 through $flex-columns {
  @include breakpoint(max, medium) {
    [data-column="#{$i}"] {
      @include col(12);
    }
  }
}

[data-column="auto"] {
  @include col();
}

@for $i from 1 through $flex-columns {
  [data-gap="#{$i}"] {
    gap: #{$i}rem;
  }
}

// ----
// CSS Grid + Data-attributes
// ----
// Inspired by Chris Coyier's nifty exanple of using data-attributes and CSS Grid together on css-tricks.com
// https://css-tricks.com/a-complete-guide-to-data-attributes/
// Cool thing about this trick is how it can be ported to variable controller fields in many CMS backends
// so you can develop easy layout control functions for end-users that require no code.
// ----

[data-grid] {
  display: grid;
  margin: 0 auto;
  padding: 0;
  width: 100%;
}

[data-grid] > div {
  padding: calc($space-phi / $pi);
}

// Using Open Prop's grid-adapt-mixin custom property for a easy, responsive grid layout that
// will generate 3 columns automatically on large screens and adapt columns down on smaller screens.

[data-grid="auto"] {
  grid-template-columns: var(--grid_adapt_mixin);
}

// Generate attribute classes for six columns, with a media query to make them fall in line on mobile
$grid-columns: 6;

@for $i from 1 through $grid-columns {
  [data-grid="#{$i}"] {
    grid-template-columns: repeat($i, 1fr);
    @include breakpoint(max, small) {
      grid-template-columns: repeat(auto-fill, minmax(480px, 1fr));
    }
    @include breakpoint(small, medium) {
      grid-template-columns: repeat(auto-fill, minmax(32rem, 1fr));
    }
  }
}

// 2 row x 2 column layout
@for $i from 1 through $grid-columns {
  [data-grid="2x#{$i}"] {
    grid-template-columns: repeat($i, 1fr);
    grid-template-rows: repeat(2, 1fr);
    @include breakpoint(max, small) {
      grid-template-columns: repeat(auto-fill, minmax(480px, 1fr));
    }
    @include breakpoint(small, medium) {
      grid-template-columns: repeat(auto-fill, minmax(32rem, 1fr));
    }
  }
}

// 3 row x 2 column layout
@for $i from 1 through $grid-columns {
  [data-grid="3x#{$i}"] {
    grid-template-columns: repeat($i, 1fr);
    grid-template-rows: repeat(2, 1fr);
    @include breakpoint(max, small) {
      grid-template-columns: repeat(auto-fill, minmax(480px, 1fr));
    }
    @include breakpoint(small, medium) {
      grid-template-columns: repeat(auto-fill, minmax(32rem, 1fr));
    }
  }
}

// 4 row x 2 column layout
@for $i from 1 through $grid-columns {
  [data-grid="4x#{$i}"] {
    grid-template-columns: repeat($i, 1fr);
    grid-template-rows: repeat(2, 1fr);
    @include breakpoint(max, small) {
      grid-template-columns: repeat(auto-fill, minmax(480px, 1fr));
    }
    @include breakpoint(small, medium) {
      grid-template-columns: repeat(auto-fill, minmax(32rem, 1fr));
    }
  }
}

// add some vertical gutters
[data-gutter="x"] {
  padding: 0 $space-phi;
}

// add some horizontal gutters
[data-gutter="y"] {
  padding: calc(#{$space-e} / 2) 0;
}

// vertical AND horizontal gutters
[data-gutter="x/y"] {
  padding: calc(#{$space-e} / 2) $space-phi;
}
